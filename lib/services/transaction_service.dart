import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/transaction.dart';
import '../models/user_model.dart';
import 'api_config.dart';
import 'api_service.dart';
import 'user_service.dart';

class TransactionService {
  final String baseUrl = ApiConfig.baseUrl;
  final UserService _userService;
  
  // StreamController pour les notifications
  static final _transactionStreamController = StreamController<void>.broadcast();
  static Stream<void> get onTransactionCompleted => _transactionStreamController.stream;

  TransactionService() : _userService = UserService(ApiService());

  // M√©thode pour notifier les observateurs
  void _notifyTransactionCompleted() {
    print('üîÑ Notification de mise √† jour √©mise');
    _transactionStreamController.add(null);
  }

  Future<List<Transaction>> getMyTransactions() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/transactions/my-transactions'),
        headers: await ApiConfig.getAuthHeaders(),
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        
        if (jsonResponse['data'] == null) {
          return [];
        }

        final List<dynamic> transactionsData = jsonResponse['data'] is List 
          ? jsonResponse['data'] 
          : [jsonResponse['data']];

        print('üì¶ Transactions data: $transactionsData');

        final transactions = transactionsData.map((json) {
          try {
            return Transaction.fromJson(json);
          } catch (e) {
            print('‚ùå Error parsing transaction: $e');
            print('üîç Problematic JSON: $json');
            throw Exception('Erreur de parsing: $e');
          }
        }).toList();

        _notifyTransactionCompleted(); // Notifier apr√®s r√©cup√©ration r√©ussie
        return transactions;

      } else if (response.statusCode == 401) {
        throw Exception('Session expir√©e. Veuillez vous reconnecter.');
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('üì¶ Response body: ${response.body}');
        throw Exception('Erreur lors de la r√©cup√©ration des transactions');
      }
    } catch (e) {
      print('‚ùå Service error: $e');
      throw Exception('Impossible de r√©cup√©rer les transactions: $e');
    }
  }

  String _formatPhoneNumber(String phoneNumber) {
    String cleanNumber = phoneNumber.replaceAll(' ', '');
    
    if (cleanNumber.startsWith('+221')) {
      return cleanNumber;
    }
    
    if (cleanNumber.startsWith('221')) {
      return '+$cleanNumber';
    }
    
    if (cleanNumber.startsWith('7')) {
      return '+221$cleanNumber';
    }
    
    throw Exception('Format de num√©ro de t√©l√©phone invalide. Le num√©ro doit commencer par 7 ou +221 ou 221');
  }

  Future<Transaction> transferMoney({
    required String recipientPhone,
    required double amount,
  }) async {
    try {
      final currentUser = await _userService.getCurrentUser();
      if (currentUser == null) {
        throw Exception('Aucun utilisateur connect√©');
      }

      String formattedRecipientPhone;
      String senderPhone;
      
      try {
        formattedRecipientPhone = _formatPhoneNumber(recipientPhone);
        senderPhone = _formatPhoneNumber(currentUser.numeroTelephone);
        
        print('üì± Validation des num√©ros:');
        print('- Num√©ro original destinataire: $recipientPhone');
        print('- Num√©ro format√© destinataire: $formattedRecipientPhone');
        print('- Num√©ro original exp√©diteur: ${currentUser.numeroTelephone}');
        print('- Num√©ro format√© exp√©diteur: $senderPhone');
        
      } catch (e) {
        print('‚ùå Erreur de formatage des num√©ros: $e');
        throw Exception('Num√©ro de t√©l√©phone invalide: $e');
      }

      if (formattedRecipientPhone == senderPhone) {
        throw Exception('Vous ne pouvez pas transf√©rer de l\'argent √† vous-m√™me');
      }

      print('\nüîÑ D√©tails du transfert:');
      print('üë§ Exp√©diteur: ${currentUser.nomComplet}');
      print('üì± Num√©ro exp√©diteur: $senderPhone');
      print('üë• Destinataire: Num√©ro $formattedRecipientPhone');
      print('üí∞ Montant: $amount FCFA\n');

      final requestBody = {
        'senderPhoneNumber': senderPhone,
        'recipientPhoneNumber': formattedRecipientPhone,
        'amount': amount,
      };

      final response = await http.post(
        Uri.parse('$baseUrl/transactions/transfer'),
        headers: {
          ...await ApiConfig.getAuthHeaders(),
          'Content-Type': 'application/json',
        },
        body: json.encode(requestBody),
      );

      print('üì• Response status: ${response.statusCode}');
      print('üì• Response body: ${response.body}');

      if (response.statusCode == 201 || response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        
        if (jsonResponse['data'] == null) {
          throw Exception('Donn√©es de transaction invalides');
        }

        try {
          final transaction = Transaction.fromJson(jsonResponse['data']);
          print('\n‚úÖ Transfert r√©ussi!');
          print('üìã ID Transaction: ${transaction.id}');
          print('üí∞ Montant: ${transaction.amount} FCFA');
          print('üì± De: $senderPhone');
          print('üì± Vers: $formattedRecipientPhone\n');

          _notifyTransactionCompleted(); // Notifier apr√®s transfert r√©ussi
          return transaction;
          
        } catch (e) {
          print('‚ùå Error parsing transaction: $e');
          print('üîç Problematic JSON: ${jsonResponse['data']}');
          throw Exception('Erreur lors du traitement de la transaction');
        }
      } else if (response.statusCode == 401) {
        throw Exception('Session expir√©e. Veuillez vous reconnecter.');
      } else if (response.statusCode == 400) {
        final errorResponse = json.decode(response.body);
        throw Exception(errorResponse['message'] ?? errorResponse['data'] ?? 'Donn√©es invalides');
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('üì¶ Response body: ${response.body}');
        final errorResponse = json.decode(response.body);
        throw Exception(errorResponse['data'] ?? errorResponse['message'] ?? 'Erreur lors du transfert');
      }
    } catch (e) {
      print('‚ùå Transfer error: $e');
      rethrow;
    }
  }

  Future<List<Transaction>> transferMultiple({
    required List<String> recipientPhoneNumbers,
    required double amount,
  }) async {
    try {
      final currentUser = await _userService.getCurrentUser();
      if (currentUser == null) {
        throw Exception('Aucun utilisateur connect√©');
      }

      String senderPhone = currentUser.numeroTelephone;
      if (!senderPhone.startsWith('+')) {
        senderPhone = '+221${currentUser.numeroTelephone}';
      }

      final formattedRecipientNumbers = recipientPhoneNumbers.map((phone) {
        if (!phone.startsWith('+')) {
          return '+221$phone';
        }
        return phone;
      }).toList();

      if (formattedRecipientNumbers.contains(senderPhone)) {
        throw Exception('Vous ne pouvez pas transf√©rer de l\'argent √† vous-m√™me');
      }

      final requestBody = {
        'senderPhoneNumber': senderPhone,
        'recipientPhoneNumbers': formattedRecipientNumbers,
        'amount': amount,
      };

      final response = await http.post(
        Uri.parse('$baseUrl/transactions/transfer/multiple'),
        headers: {
          ...await ApiConfig.getAuthHeaders(),
          'Content-Type': 'application/json',
        },
        body: json.encode(requestBody),
      );

      if (response.statusCode == 201 || response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        
        if (jsonResponse['data'] == null) {
          return [];
        }

        final List<dynamic> transactionsData = jsonResponse['data'] is List 
          ? jsonResponse['data'] 
          : [jsonResponse['data']];

        final transactions = transactionsData.map((json) {
          try {
            return Transaction.fromJson(json);
          } catch (e) {
            print('‚ùå Error parsing transaction: $e');
            print('üîç Problematic JSON: $json');
            throw Exception('Erreur lors du parsing des transactions');
          }
        }).toList();

        _notifyTransactionCompleted(); // Notifier apr√®s transferts multiples r√©ussis
        return transactions;

      } else if (response.statusCode == 401) {
        throw Exception('Session expir√©e. Veuillez vous reconnecter.');
      } else if (response.statusCode == 400) {
        final errorResponse = json.decode(response.body);
        throw Exception(errorResponse['message'] ?? errorResponse['data'] ?? 'Donn√©es invalides');
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('üì¶ Response body: ${response.body}');
        final errorResponse = json.decode(response.body);
        throw Exception(errorResponse['message'] ?? errorResponse['data'] ?? 'Erreur lors des transferts multiples');
      }
    } catch (e) {
      print('‚ùå Multiple transfer error: $e');
      rethrow;
    }
  }

    Future<void> cancelTransaction(String transactionId) async {
      try {
        print('üîÑ Tentative d\'annulation de la transaction: $transactionId');
        
        final requestBody = {
          'transactionId': transactionId
        };
        print('üì§ Request body: $requestBody');
        
        final response = await http.post(
          Uri.parse('$baseUrl/transactions/cancel'),
          body: json.encode(requestBody),
          headers: {
            ...await ApiConfig.getAuthHeaders(),
            'Content-Type': 'application/json',
          },
        );
        
        print('üì• Response status: ${response.statusCode}');
        print('üì• Response body: ${response.body}');
        
        if (response.statusCode == 200) {
          print('‚úÖ Transaction annul√©e avec succ√®s');
          _notifyTransactionCompleted();
        } else {
          final errorResponse = json.decode(response.body);
          print('‚ùå Erreur HTTP: ${response.statusCode}');
          print('‚ùå Message d\'erreur: ${errorResponse['message'] ?? errorResponse['data'] ?? 'Aucun message'}');
          
          if (response.statusCode == 401) {
            throw Exception('Session expir√©e. Veuillez vous reconnecter.');
          } else if (response.statusCode == 400) {
            throw Exception(errorResponse['message'] ?? errorResponse['data'] ?? 'Requ√™te invalide');
          } else {
            throw Exception(errorResponse['message'] ?? 
                          errorResponse['data'] ?? 
                          'Impossible d\'annuler la transaction (Code: ${response.statusCode})');
          }
        }
      } catch (e) {
        print('‚ùå Erreur lors de l\'annulation: $e');
        print('‚ùå Stack trace: ${StackTrace.current}');
        throw Exception('Erreur lors de l\'annulation de la transaction: $e');
      }
    }

  Future<Transaction> getTransactionById(String id) async {
    try {
      print('üîç Fetching transaction with ID: $id');
      final response = await http.get(
        Uri.parse('$baseUrl/$id'),
        headers: await ApiConfig.getAuthHeaders(),
      );

      if (response.statusCode == 200) {
        print('‚úÖ Transaction fetched successfully: ${response.body}');
        return Transaction.fromJson(json.decode(response.body));
      } else {
        print('‚ùå Failed to fetch transaction: ${response.statusCode}');
        throw Exception('Transaction non trouv√©e');
      }
    } catch (e) {
      print('‚ùå Get transaction error: $e');
      rethrow;
    }
  }

  // M√©thode pour forcer un rafra√Æchissement
  Future<void> refreshTransactions() async {
    await getMyTransactions();
  }

  // Nettoyage des ressources
  static void dispose() {
    _transactionStreamController.close();
  }
}